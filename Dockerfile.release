ARG PY_VERSION_DEFAULT=3.12

# would it be an idea to use the mgbuild container for this?
FROM ubuntu:24.04 as base

USER root

ARG TARGETARCH
ARG PY_VERSION_DEFAULT
ENV PY_VERSION ${PY_VERSION_DEFAULT}
ENV TORCH_VERSION=2.4.0


# Essentials for production/dev
RUN apt-get update && apt-get install -y \
    libcurl4        `memgraph` \
    libpython${PY_VERSION}   `memgraph` \
    libssl-dev       `memgraph` \
    openssl         `memgraph` \
    build-essential `mage-memgraph` \
    cmake           `mage-memgraph` \
    curl            `mage-memgraph` \
    g++             `mage-memgraph` \
    python3         `mage-memgraph` \
    python3-pip     `mage-memgraph` \
    python3-setuptools     `mage-memgraph` \
    python3-dev     `mage-memgraph` \
    clang           `mage-memgraph` \
    git             `mage-memgraph` \
    unixodbc-dev        `mage-memgraph` \
    libboost-all-dev `mage-memgraph` \
    uuid-dev \
    gdb \
    procps \
    libc6-dbg \
    --no-install-recommends \
    && ln -s /usr/bin/$(ls /usr/bin | grep perf) /usr/bin/perf \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY memgraph-${TARGETARCH}.deb .

# Hack to remove modules that cause error on loading of torch modules
# Must be here due to multi-phase build. The setup script is in dev phase
# whereas we unpack memgraph in the base phase
RUN dpkg -i memgraph-${TARGETARCH}.deb && rm memgraph-${TARGETARCH}.deb

ENV LD_LIBRARY_PATH /usr/lib/memgraph/query_modules

# Memgraph listens for Bolt Protocol on this port by default.
EXPOSE 7687

FROM base as dev

# download the toolchain
RUN curl -o /toolchain.tar.gz https://s3.eu-west-1.amazonaws.com/deps.memgraph.io/toolchain-v6/toolchain-v6-binaries-ubuntu-24.04-amd64.tar.gz

# extract the toolchain
RUN tar xzvfm toolchain.tar.gz -C /opt

ARG BUILD_TYPE=Release

WORKDIR /mage
COPY . /mage

# hacks so we can do everything under the `memgraph` user
RUN chown -R memgraph: /mage
RUN mkdir -pv /usr/lib/memgraph/query_modules
RUN chown -R memgraph: /usr/lib/memgraph/query_modules
USER memgraph

# First install requirements
RUN python3 -m pip install -r /mage/python/requirements.txt --break-system-packages \
    && python3 -m pip install -r /mage/python/tests/requirements.txt --break-system-packages \
    && python3 -m pip install --no-cache-dir -r /usr/lib/memgraph/auth_module/requirements.txt --break-system-packages

# Torch and DGL 
RUN python3 -m pip install torch-sparse torch-cluster torch-spline-conv torch-geometric torch-scatter -f https://data.pyg.org/whl/torch-2.3.0+cu121.html --break-system-packages \
    && python3 -m pip install dgl -f https://data.dgl.ai/wheels/torch-2.3/cu121/repo.html --break-system-packages

# Build query modules
SHELL ["/bin/bash", "-c"]
RUN source /opt/toolchain-v6/activate && curl https://sh.rustup.rs -sSf | sh -s -- -y \
    && export PATH="$HOME/.cargo/bin:${PATH}" \
    && python3 /mage/setup build -p /usr/lib/memgraph/query_modules/ --cpp-build-flags CMAKE_BUILD_TYPE=${BUILD_TYPE} \
    && chown -R memgraph: /mage

#remove the toolchain
USER root
RUN rm -rf /opt/toolchain-v6

USER memgraph
ENTRYPOINT ["/usr/lib/memgraph/memgraph"]
CMD [""]

FROM base as prod

USER root
ENTRYPOINT []
ARG PY_VERSION_DEFAULT
ENV PY_VERSION ${PY_VERSION_DEFAULT}

# Copy modules
COPY --from=dev /usr/lib/memgraph/query_modules/ /usr/lib/memgraph/query_modules/
COPY --from=dev /usr/lib/memgraph/auth_module/ /usr/lib/memgraph/auth_module/

# Copy Python build
COPY --from=dev /usr/local/lib/python${PY_VERSION}/ /usr/local/lib/python${PY_VERSION}/

# Copy e2e tests
COPY --from=dev /mage/e2e/ /mage/e2e/

RUN mv /mage/e2e /e2e/ \
    && rm -rf /mage/* \
    && mv /e2e/ /mage/ \
    && chown -R memgraph: /mage/e2e \
    && export PATH="/usr/local/lib/python${PY_VERSION}:${PATH}" \
    && apt-get -y --purge autoremove clang git curl python3-pip python3-dev cmake build-essential \
    && apt-get clean

USER memgraph
ENTRYPOINT ["/usr/lib/memgraph/memgraph"]
CMD [""]