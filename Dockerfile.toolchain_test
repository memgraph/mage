ARG PY_VERSION_DEFAULT=3.12
FROM ubuntu:24.04 as base

USER root

ARG MG_VERSION=3.0.0
ARG PY_VERSION_DEFAULT
ENV MG_VERSION ${MG_VERSION}
ENV PY_VERSION ${PY_VERSION_DEFAULT}
ENV TARGETARCH="amd64"
ENV PY_VERSION=${PY_VERSION_DEFAULT}
ENV TORCH_VERSION=2.4.0

# Install essentials
RUN apt-get update && apt-get install -y \
    libcurl4 \
    libpython${PY_VERSION} \
    libssl-dev \
    openssl \
    build-essential \
    cmake \
    curl \
    g++ \
    python3 \
    python3-pip \
    python3-setuptools \
    python3-dev \
    clang \
    git \
    unixodbc-dev \
    libboost-all-dev \
    uuid-dev \
    gdb \
    procps \
    libc6 \
    libc6-dev \
    libc6-dbg \
    --no-install-recommends \
    && ln -s /usr/bin/$(ls /usr/bin | grep perf) /usr/bin/perf \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy and install the memgraph deb package
RUN curl https://download.memgraph.com/memgraph/v${MG_VERSION}/ubuntu-24.04/memgraph_${MG_VERSION}-1_amd64.deb --output memgraph.deb \
&& dpkg -i memgraph.deb \
&& rm memgraph.deb 


# Set the memgraph query modules library path (required)
ENV LD_LIBRARY_PATH=/usr/lib/memgraph/query_modules

# Expose memgraph's Bolt protocol port (if needed)
EXPOSE 7687

# ---- Test Stage with Toolchain Environment ----
FROM base as test

# Copy and install the toolchain binaries
COPY toolchain-v7-binaries-ubuntu-24.04.tar.gz .
RUN tar xzvfm toolchain-v7-binaries-ubuntu-24.04.tar.gz -C /opt

# Set toolchain environment variables matching the activation script
ENV MG_TOOLCHAIN_ROOT=/opt/toolchain-v7 \
    MG_TOOLCHAIN_VERSION=7 \
    PATH=/opt/toolchain-v7:/opt/toolchain-v7/bin:$PATH \
    LD_LIBRARY_PATH=/opt/toolchain-v7/lib:/opt/toolchain-v7/lib64 \
    CXXFLAGS="-isystem /opt/toolchain-v7/include $CXXFLAGS" \
    CFLAGS="-isystem /opt/toolchain-v7/include $CFLAGS"

# Set working directory and copy source
WORKDIR /mage
COPY . /mage

# Install Python requirements for both production and testing
RUN python3 -m pip install -r /mage/python/requirements.txt --break-system-packages \
    && python3 -m pip install -r /mage/python/tests/requirements.txt --break-system-packages \
    && python3 -m pip install --no-cache-dir -r /usr/lib/memgraph/auth_module/requirements.txt --break-system-packages

# Install Torch and DGL dependencies (if tests require them)
RUN python3 -m pip install torch-sparse torch-cluster torch-spline-conv torch-geometric torch-scatter -f https://data.pyg.org/whl/torch-2.3.0+cu121.html --break-system-packages \
    && python3 -m pip install dgl -f https://data.dgl.ai/wheels/torch-2.3/cu121/repo.html --break-system-packages

# Build the C++ query modules (using the toolchain environment)
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y \
    && export PATH="/root/.cargo/bin:${PATH}" \
    && python3 /mage/setup build -p /usr/lib/memgraph/query_modules/ --cpp-build-flags CMAKE_BUILD_TYPE=Release

# Run tests in three parts:
RUN chown -hR memgraph /mage
USER memgraph
# RUN /usr/lib/memgraph/memgraph &

# 1. Run C++ tests using ctest
RUN cd /mage/cpp/build && ctest --output-on-failure

# 2. Run Python tests using pytest
RUN cd /mage/python && python3 -m pytest . || true

RUN /usr/lib/memgraph/memgraph & \
    sleep 5 && \
    cd /mage && ./test_e2e && \
    pkill -f /usr/lib/memgraph/memgraph



# The final command indicates success if all tests pass.
CMD ["echo", "All tests passed!"]

