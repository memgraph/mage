name: Reusable build and test

on: 
  workflow_call:
    inputs:
      arch:
        type: string
        description: "Architecture to build the image for (amd64/arm64)"
        required: true
      build_scope:
        type: string
        description: "Mage build scope"
        default: 'all'
      build_target:
        type: string
        description: "Mage build target"
        default: 'prod'
      memgraph_version:
        type: string
        description: "Memgraph version built into this image (format: X.Y.Z)"
        default: '2.18.0'
      memgraph_download_link:
        type: string
        description: "Memgraph package download link. Leave empty to use the official download link."
        required: false
      memgraph_ref:
        type: string
        description: "Memgraph submodule branch to build query modules from"
        default: 'master'
      memgraph_ref_update:
        type: string
        description: "Update Memgraph submodule to the latest commit"
        default: true

env:
  PY_VERSION: "3.9"
  CORE_COUNT: "8"
  MAGE_CONTAINER: "mage"
  MEMGRAPH_PORT: 7687
  NEO4J_PORT: 7688
  NEO4J_CONTAINER: "neo4j_test"
  OS: "debian-11"

jobs:
  BuildAndTest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout specific branch in submodule
        run: |
          cd cpp/memgraph
          git checkout ${{ inputs.memgraph_ref }}
          if [[ "${{ inputs.memgraph_ref_update }}" == "true" ]]; then
            git pull
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up and check memgraph download link
        run: |
          if [[ -z "${{ inputs.memgraph_download_link }}" ]]; then
            echo "Using official download link"
            mg_url="https://download.memgraph.com/memgraph/v${{ inputs.memgraph_version }}/$OS${{ inputs.arch == 'arm64' && '-aarch64' || '' }}/memgraph_${{ inputs.memgraph_version }}-1_${{ inputs.arch }}.deb"
          else
            echo "Using custom download link"
            mg_url=${{ inputs.memgraph_download_link }}
          fi
          if curl --output /dev/null --silent --head --fail $mg_url; then
            echo "Memgraph download link is valid"
            echo "MEMGRAPH_DOWNLOAD_LINK=${mg_url}" >> $GITHUB_ENV 
          else
            echo "Memgraph download link is not valid"
            exit 1
          fi

      - name: Download memgraph binary
        run: curl -L ${{ env.MEMGRAPH_DOWNLOAD_LINK }} > memgraph-${{ inputs.arch }}.deb

      - name: Disk status before cleaning
        run: |
          df -h
          docker buildx du

      - name: Docker system prune
        run: |
          docker buildx prune --all -f
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /opt/hostedtoolcache/go
          sudo rm -rf /opt/hostedtoolcache

      - name: Rust library tests
        if: inputs.build_target == 'dev'
        run: |
          cd rust/rsmgp-sys
          cargo fmt -- --check
          cargo test

      - name: Build and run Memgraph MAGE:${{ inputs.build_target }}
        run: |

          DOCKER_BUILDKIT=1 docker buildx build \
          --tag memgraph-mage:${{ inputs.build_target }} \
          --target ${{ inputs.build_target }} \
          --platform linux/${{ inputs.arch }} \
          --file Dockerfile.${{ inputs.build_scope == 'without ML' && 'no_ML' || 'release' }} \
          --load .
          docker run -d -p ${{ env.MEMGRAPH_PORT }}:7687 --name ${{ env.MAGE_CONTAINER }} memgraph-mage:${{ inputs.build_target }} --telemetry-enabled=False

      - name: Set up C++
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}

      - name: Install Python test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./python/tests/requirements.txt

      - name: Build C++ modules
        run: |
          mkdir -p cpp/build
          cd cpp/build
          cmake ..
          make -j${{ env.CORE_COUNT }}

      - name: C++ Modules unit tests
        if: inputs.build_target == 'dev'
        run: |
          cd cpp/build
          ctest -j${{ env.CORE_COUNT }}

      - name: Python modules unit tests
        if: inputs.build_target == 'dev' && inputs.build_scope != 'without ML'
        env:
          PYTHONPATH: "$PWD/python"
        run: |
          docker exec -i -u root ${{ env.MAGE_CONTAINER }} bash -c "cd /mage/python/ && python3 -m pytest ."

      - name: Run End-to-end tests
        if: inputs.arch != 'arm64'
        env:
          PYTHONPATH: "$PWD/e2e"
        run: |
          cd e2e
          docker exec -i -u root ${{ env.MAGE_CONTAINER }} bash -c \
          "cd /mage/e2e/ && python3 -m pytest . -k 'not cugraph and not node_classification and not link_prediction and not text ${{ inputs.build_scope == 'without ML' && 'and not tgn' || '' }}'"

      - name: Run End-to-end correctness tests
        if: inputs.arch != 'arm64'
        env:
          PYTHONPATH: "$PWD/e2e"
        run: |
          docker run --rm \
          --name ${{ env.NEO4J_CONTAINER}}  \
          -p 7474:7474 -p ${{ env.NEO4J_PORT }}:7687 \
          --rm \
          -d \
          -v $HOME/neo4j/plugins:/plugins \
          --env NEO4J_AUTH=none  \
          -e NEO4J_apoc_export_file_enabled=true \
          -e NEO4J_apoc_import_file_enabled=true \
          -e NEO4J_apoc_import_file_use__neo4j__config=true  \
          -e NEO4JLABS_PLUGINS=\["apoc"\]  neo4j:5.10.0
          sleep 5
          python3 test_e2e_correctness.py --memgraph-port ${{ env.MEMGRAPH_PORT }} --neo4j-port ${{ env.NEO4J_PORT }}
          docker stop ${{ env.NEO4J_CONTAINER}}
