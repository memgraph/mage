name: Reusable Vulnerability Scan

on:
  workflow_call:
    inputs:
      arch: 
        type: string
        description: "Image architecture (amd64|arm64)"
        required: true
      image_url:
        type: string
        description: "URL of docker image to scan"
        required: true
      run_trivy:
        type: boolean
        description: "Scan with Trivy"
        default: true
      run_grype:
        type: boolean
        description: "Scan with Grype"
        default: true
      run_cbt:
        type: boolean
        description: "Scan with CVE-bin-tool"
        default: true

jobs:
  scan-image:
    name: Scan Docker Image for Vulnerabilities
    runs-on: ${{ (inputs.arch == 'arm64') && fromJSON('["self-hosted", "Linux", "Docker", "ARM64"]') || fromJSON('["self-hosted", "Linux", "Docker", "X64"]') }}
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Docker Image
        run: |
          curl -L "${{ inputs.image_url }}" -o image.tar.gz

      - name: Load into Docker
        run: |
          image_tag="$(docker load -i image.tar.gz)"
          echo "IMAGE_TAG=$image_tag" >> $GITHUB_ENV

      - name: Create Python Environment
        run: |
          python3 -m venv env 
          source env/bin/activate
          pip install requests
          
      - name: Install Trivy
        if: ${{ inputs.run_trivy }}
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $(pwd)/trivy latest

      - name: Install Grype
        if: ${{ inputs.run_grype }}
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b $(pwd)/grype
          
      - name: Install cve-bin-tool
        if: ${{ inputs.run_cbt }}
        run: |
          source env/bin/activate
          pip install cve-bin-tool

      - name: Scan with Trivy
        if: ${{ inputs.run_trivy }}
        run: |
          trivy/trivy image "${{ env.IMAGE_TAG }}" > trivy-summary.txt
        
      - name: Upload Trivy Report Summary Artifact
        if: ${{ inputs.run_trivy }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-summary-${{ inputs.arch }}
          path: trivy-summary.txt        

      - name: Scan with Grype
        if: ${{ inputs.run_grype }}
        run: |
          grype/grype "docker:${{ env.IMAGE_TAG }}" > grype-summary.txt

      - name: Upload Grype Report Summary Artifact
        if: ${{ inputs.run_grype }}
        uses: actions/upload-artifact@v4
        with:
          name: grype-summary-${{ inputs.arch }}
          path: grype-summary.md        
          
      - name: Scan with cve-bin-tool
        if: ${{ inputs.run_cbt }}
        run: |
          source env/bin/activate
          cve-bin-tool image.tar.gz > cve-bin-tool-summary.txt

      - name: Upload cve-bin-tool Report Summary Artifact
        if: ${{ inputs.run_cbt }}
        uses: actions/upload-artifact@v4
        with:
          name: cve-bin-tool-summary-${{ inputs.arch }}
          path: cve-bin-tool-summary.md        

      - name: Send Slack Message
        env:
          INFRA_WEBHOOK_URL: ${{ secrets.INFRA_WEBHOOK_URL }}
        run: |
          source env/bin/activate
          python3 scripts/cve-scanner-message.py

      - name: Cleanup
        if: always()
        run: |
          rm -rf env || true
          rm -rf trivy || true
          rm -rf grype || true
          rm trivy-summary.txt || true
          rm grype-summary.txt || true
          rm cve-bin-tool-summary.txt || true
          docker rmi ${{ env.IMAGE_TAG }} || true
          rm image.tar.gz || true