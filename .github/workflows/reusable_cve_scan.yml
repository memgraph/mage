name: Reusable Vulnerability Scan

on:
  workflow_call:
    inputs:
      arch: 
        type: string
        description: "Image architecture (amd64|arm64)"
        required: true
      image_url:
        type: string
        description: "URL of docker image to scan"
        required: true
      image_type:
        type: string
        description: "Image type (memgraph|mage)"
        required: true
      run_trivy:
        type: boolean
        description: "Scan with Trivy"
        default: true
      run_grype:
        type: boolean
        description: "Scan with Grype"
        default: true
      run_cbt:
        type: boolean
        description: "Scan with CVE-bin-tool"
        default: true
      send_slack_message:
        type: boolean
        description: "Send a Slack message"
        default: true

jobs:
  scan-image:
    name: Scan Docker Image for Vulnerabilities (${{ inputs.image_type }}, ${{ inputs.arch }})
    runs-on: ${{ (inputs.arch == 'arm64') && fromJSON('["self-hosted", "Linux", "Docker", "ARM64", "Ubuntu24.04"]') || fromJSON('["self-hosted", "Linux", "Docker", "X64", "Ubuntu24.04"]') }}
    steps:
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Docker Image
        run: |
          curl -L "${{ inputs.image_url }}" -o image.tar.gz

      - name: Load into Docker
        run: |
          output="$(docker load -i image.tar.gz)"
          image_tag=${output#Loaded image: }
          echo "IMAGE_TAG=$image_tag" >> $GITHUB_ENV

      - name: Create Python Environment
        run: |
          python3 -m venv env 
          source env/bin/activate
          pip install requests tqdm
          
      - name: Install Trivy
        if: ${{ inputs.run_trivy }}
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $(pwd)/trivy latest

      - name: Install Grype
        if: ${{ inputs.run_grype }}
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b $(pwd)/grype
          
      - name: Install cve-bin-tool
        if: ${{ inputs.run_cbt }}
        run: |
          source env/bin/activate
          pip install cve-bin-tool

      - name: Scan with Trivy
        if: ${{ inputs.run_trivy }}
        run: |
          trivy/trivy image --scanners vuln "${{ env.IMAGE_TAG }}" > trivy-summary.txt
          trivy/trivy image --scanners vuln "${{ env.IMAGE_TAG }}" -f json > trivy-summary.json
        
      - name: Upload Trivy Report Summary Artifact
        if: ${{ inputs.run_trivy }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image_type }}-${{ inputs.arch }}-trivy-summary
          path: trivy-summary.txt        

      - name: Scan with Grype
        if: ${{ inputs.run_grype }}
        run: |
          grype/grype "docker:${{ env.IMAGE_TAG }}" > grype-summary.txt
          grype/grype "docker:${{ env.IMAGE_TAG }}" -o json > grype-summary.json

      - name: Upload Grype Report Summary Artifact
        if: ${{ inputs.run_grype }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image_type }}-${{ inputs.arch }}-grype-summary
          path: grype-summary.txt
          
      - name: Launch Docker Container
        if: ${{ inputs.run_cbt }}
        run: |
          docker run --rm -d --name memgraph "${{ env.IMAGE_TAG }}" --telemetry-enabled=False
      
      - name: Update CVE Database
        if: ${{ inputs.run_cbt }}
        continue-on-error: true  # this can be flaky
        run: |
          source env/bin/activate
          python3 scripts/update_cve_db.py
      
      - name: Extract Container Root Filesystem
        if: ${{ inputs.run_cbt }}
        run: |
          ./scripts/extract-image-filesystem.sh "${{ env.IMAGE_TAG }}" "rootfs"
      
      - name: Scan /usr/lib/memgraph
        if: ${{ inputs.run_cbt }}
        run: |
          source env/bin/activate
          python3 scripts/scan_memgraph.py "rootfs" "$(nproc)"

      - name: Scan Languages
        if: ${{ inputs.run_cbt }}
        run: |
          source env/bin/activate
          python3 scripts/scan_languages.py "rootfs"

      - name: Scan APT Packages
        if: ${{ inputs.run_cbt }}
        run: |
          source env/bin/activate
          python3 scripts/scan_apt.py "${{ env.IMAGE_TAG }}"

      - name: Upload cve-bin-tool Binary Scan Artifact
        if: ${{ inputs.run_cbt }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image_type }}-${{ inputs.arch }}-cve-bin-tool-memgraph-summary
          path: cve-bin-tool-memgraph-summary.json        

      - name: Upload cve-bin-tool Language Scan Artifact
        if: ${{ inputs.run_cbt }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image_type }}-${{ inputs.arch }}-cve-bin-tool-language-summary
          path: cve-bin-tool-lang-summary.json
          
      - name: Upload cve-bin-tool APT Package Scan Artifact
        if: ${{ inputs.run_cbt }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image_type }}-${{ inputs.arch }}-cve-bin-tool-apt-summary
          path: cve-bin-tool-apt-summary.json

      - name: Send Slack Message
        if: ${{ inputs.send_slack_message && always() }}
        id: slack-message
        env:
          INFRA_WEBHOOK_URL: ${{ secrets.INFRA_WEBHOOK_URL }}
        run: |
          files=(
            trivy-summary.json
            grype-summary.json
            cve-bin-tool-memgraph-summary.json
            cve-bin-tool-lang-summary.json
            cve-bin-tool-apt-summary.json
          )
          if [ -n "$(ls "${files[@]}" 2>/dev/null | grep -v '^\.$')" ]; then
            source env/bin/activate
            python3 scripts/cve_message.py "${{ inputs.arch }}" "${{ inputs.image_type }}"
          else
            echo "No summary files found. Skipping Slack message"
          fi

      - name: Upload Full CVE List artifact
        if: ${{ steps.slack-message.outputs.success }}
        uses: actions/upload-artifact@v4
        with:
          name: full-cve-list-artifact
          path: full-cve-list.txt

      - name: Cleanup
        if: always()
        run: |
          rm -rf env || true
          rm -rf trivy || true
          rm -rf grype || true
          rm -rf rootfs || true
          rm trivy-summary.txt || true
          rm trivy-summary.json || true
          rm grype-summary.txt || true
          rm grype-summary.json || true
          rm cve-bin-tool-apt-summary.json || true
          rm cve-bin-tool-lang-summary.json || true
          rm cve-bin-tool-memgraph-summary.json || true
          rm full-cve-list.txt || true
          docker stop memgraph || true
          docker wait memgraph || true
          docker rmi ${{ env.IMAGE_TAG }} || true
          rm image.tar.gz || true