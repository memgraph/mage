name: "Reusable package mage and upload"
on:
  workflow_call:
    inputs:
      arch:
        type: string
        description: "Architecture to build the image for"
        required: true
      mage_version:
        type: string
        description: "Mage version built into this image (format: X.Y.Z)"
        required: true
      mage_build_scope:
        type: string
        description: "Mage build scope"
        default: 'all'
      mage_build_target:
        type: string
        description: "Mage build target"
        default: 'prod'
      mage_build_type:
        type: string
        description: "Mage build type"
        default: 'Release'
      memgraph_version:
        type: string
        description: "Memgraph version built into this image (format: X.Y.Z)"
        required: true
      memgraph_download_link:
        type: string
        description: "Memgraph package download link. Leave empty to use the official download link."
        default: ""
      shorten_tag:
        type: string
        description: "Make the final tag as short as possible, shortest format is X.Y-memgraph-X.Y"
        default: true
      force_release:
        type: string
        description: "Overwrite existing image on dockerhub"
        default: true
      push_to_dockerhub:
        type: string
        description: "Push the image to DockerHub?"
        default: false
      push_to_s3:
        type: string
        description: "Push the image to S3?"
        default: false
      s3_dest_bucket:
        type: string
        description: "Destination bucket in S3"
        default: "deps.memgraph.io"
      s3_dest_dir:
        type: string
        description: "Destination directory in S3 bucket"
        default: "mage-unofficial"
      large_runner:
        type: string
        description: "Use large runner?"
        default: false

env:
  OS: ${{ inputs.arch == 'arm' && 'debian-11-aarch64' || 'debian-11' }}
  DOCKER_REPOSITORY_NAME: memgraph/memgraph-mage

jobs:
  BuildAndPush:
    runs-on: ${{ inputs.large_runner == 'true' && 'ubuntu-large' || 'ubuntu-latest' }}
    steps:            
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set build scope, target and type
        run: |
          BUILD_TARGET="${{ inputs.mage_build_target }}"
          BUILD_SCOPE="${{ inputs.mage_build_scope }}"
          BUILD_TYPE="${{ inputs.mage_build_type }}"
          if [[ "$BUILD_TARGET" == 'dev' ]]; then
            BUILD_SCOPE="with ML"
            BUILD_TYPE="RelWithDebInfo"
          fi
          echo "MAGE_BUILD_SCOPE=$BUILD_SCOPE" >> $GITHUB_ENV
          echo "MAGE_BUILD_TARGET=$BUILD_TARGET" >> $GITHUB_ENV
          echo "MAGE_BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV

      - name: Set image tag and artifact name
        run: |
          MEMGRAPH_VERSION=${{ inputs.memgraph_version }}
          MAGE_VERSION=${{ inputs.mage_version }}
          if [[ ${{ inputs.shorten_tag }} == true ]]; then
            memgraph_patch_version=${MEMGRAPH_VERSION##*.}
            mage_patch_version=${MAGE_VERSION##*.}
            if [[ "$memgraph_patch_version" -eq 0 ]]; then
              MEMGRAPH_VERSION=${MEMGRAPH_VERSION%.*}
            fi
            if [[ "$mage_patch_version" -eq 0 ]]; then
              MAGE_VERSION=${MAGE_VERSION%.*}
            fi
          fi
          IMAGE_TAG="${MAGE_VERSION}-memgraph-${MEMGRAPH_VERSION}"
          ARTIFACT_NAME="mage-${IMAGE_TAG}"
          if [[ "${{ inputs.arch }}" == 'arm' ]]; then
            ARTIFACT_NAME="${ARTIFACT_NAME}-arm"
          fi
          if [[ "${{ env.MAGE_BUILD_SCOPE }}" == 'without ML' ]]; then
            ARTIFACT_NAME="${ARTIFACT_NAME}-no-ml"
            IMAGE_TAG="${IMAGE_TAG}-no-ml"
          fi
          if [[ "${{ env.MAGE_BUILD_TARGET }}" == 'dev' ]]; then
            ARTIFACT_NAME="${ARTIFACT_NAME}-dev"
            IMAGE_TAG="${IMAGE_TAG}-dev"
          fi
          if [[ "${{ env.MAGE_BUILD_TYPE }}" == 'RelWithDebInfo' ]] && [[ "${{ env.MAGE_BUILD_TARGET }}" != 'dev' ]]; then
            ARTIFACT_NAME="${ARTIFACT_NAME}-relwithdebinfo"
            IMAGE_TAG="${IMAGE_TAG}-relwithdebinfo"
          fi
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV

      - name: Set target dockerfile
        run: |
          DOCKERFILE="Dockerfile.release"
          if [[ "${{ env.MAGE_BUILD_SCOPE }}" == "without ML" ]]; then
            DOCKERFILE="Dockerfile.no_ML"
          fi
          echo "DOCKERFILE=${DOCKERFILE}" >> $GITHUB_ENV

      - name: Check if specified version tag is already pushed
        if: ${{ inputs.push_to_dockerhub == 'true' }}
        run: |
          EXISTS=$(docker manifest inspect $DOCKER_ORGANIZATION_NAME/$DOCKER_REPOSITORY_NAME:${{ env.IMAGE_TAG }} > /dev/null; echo $?)
          echo $EXISTS
          if [[ ${EXISTS} -eq 0 ]]; then
              echo The specified version has been already released to DockerHub!
              if [[ ${{ inputs.force_release }} = true ]]; then
                echo Forcing the release
              else
                echo Stopping the release
                exit 1
              fi
          else
              echo All good the specified version has not been release to DockerHub
          fi

      - name: Set up and check memgraph download link
        run: |
          if [[ -z "${{ inputs.memgraph_download_link }}" ]]; then
            echo "Using official download link"
            mg_url="https://download.memgraph.com/memgraph/v${{ inputs.memgraph_version }}/$OS/memgraph_${{ inputs.memgraph_version }}-1_${{ inputs.arch }}64.deb"
          else
            echo "Using custom download link"
            mg_url=${{ inputs.memgraph_download_link }}
          fi
          if curl --output /dev/null --silent --head --fail $mg_url; then
            echo "Memgraph download link is valid"
            echo "MEMGRAPH_DOWNLOAD_LINK=${mg_url}" >> $GITHUB_ENV 
          else
            echo "Memgraph download link is not valid"
            exit 1
          fi

      - name: Download memgraph binary
        run: curl -L ${{ env.MEMGRAPH_DOWNLOAD_LINK }} > memgraph-${{ inputs.arch }}64.deb

      # Add ability to add additional tag after the image has been built
      # --tag ${DOCKER_REPOSITORY_NAME}:${{ inputs.additional_tag }} \
      - name: Build docker image
        run: |
          docker buildx build \
          --target ${{ env.MAGE_BUILD_TARGET }} \
          --platform linux/${{ inputs.arch }}64 \
          --tag ${DOCKER_REPOSITORY_NAME}:${{ env.IMAGE_TAG }} \
          --file ${{ env.DOCKERFILE }} \
          --build-arg BUILD_TYPE=${{ env.MAGE_BUILD_TYPE }} \
          --load .

      - name: Save docker image
        run: |
          mkdir output
          docker save ${DOCKER_REPOSITORY_NAME}:${{ env.IMAGE_TAG }} > output/${{ env.ARTIFACT_NAME }}.tar.gz

      - name: Push to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.ARTIFACT_NAME }}"
          path: "output/${{ env.ARTIFACT_NAME }}.tar.gz"

      - name: Push to DockerHub
        if: ${{ inputs.push_to_dockerhub == 'true' }}
        run: docker push ${DOCKER_REPOSITORY_NAME}:${{ env.IMAGE_TAG }}

      - name: Push to S3
        if: ${{ inputs.push_to_s3 == 'true' }}
        uses: jakejarvis/s3-sync-action@v0.5.1
        env:
          AWS_S3_BUCKET: ${{ inputs.s3_dest_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "eu-west-1"
          SOURCE_DIR: "output"
          DEST_DIR: "${{ inputs.s3_dest_dir }}/"
