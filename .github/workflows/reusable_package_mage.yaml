name: "Reusable package mage and upload"
on:
  workflow_call:
    inputs:
      arch:
        type: string
        description: "Architecture to build the image for"
        required: true
      mage_version:
        type: string
        description: "Mage version built into this image (format: X.Y.Z)"
        required: true
      mage_build_type:
        type: string
        description: "Mage build type"
        default: 'Release'
      memgraph_version:
        type: string
        description: "Memgraph version built into this image (format: X.Y.Z)"
        required: true
      memgraph_download_link:
        type: string
        description: "Memgraph package download link. Leave empty to use the official download link."
        default: ""
      shorten_tag:
        type: string
        description: "Make the final tag as short as possible, shortest format is X.Y-memgraph-X.Y"
        default: true
      force_release:
        type: string
        description: "Overwrite existing image on dockerhub"
        default: true
      push_to_github:
        type: string
        description: "Push the image to GitHub?"
        default: false
      push_to_dockerhub:
        type: string
        description: "Push the image to DockerHub?"
        default: false
      push_to_s3:
        type: string
        description: "Push the image to S3?"
        default: false
      s3_dest_bucket:
        type: string
        description: "Destination bucket in S3"
        default: "deps.memgraph.io"
      s3_dest_dir:
        type: string
        description: "Destination directory in S3 bucket"
        default: "mage-unofficial"
      malloc:
        type: boolean
        description: "Use malloc build of memgraph (no jemalloc)"
        default: false
      run_smoke_tests:
        type: boolean
        description: "Run smoke tests on images after building (tests against previous tagged image)"
        default: false
      ref:
        type: string
        description: "MAGE branch or tag to build"
        default: ''
      print_output_url:
        type: boolean
        description: "Print the output URL at the end of the workflow"
        default: false

env:
  OS: "${{ inputs.arch == 'arm64' && 'ubuntu-24.04-aarch64' || 'ubuntu-24.04' }}${{ inputs.malloc && '-malloc' || '' }}"
  DOCKER_REPOSITORY_NAME: memgraph/memgraph-mage

jobs:
  BuildAndPush:
    runs-on: ${{ (inputs.arch == 'arm64') && fromJSON('["self-hosted", "DockerMgBuild","ARM64"]') || fromJSON('["self-hosted", "DockerMgBuild", "X64"]') }}
    outputs:
      s3_package_url: ${{ steps.output-url.outputs.s3_url }}
    steps:            
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ inputs.ref != '' && inputs.ref || github.ref }}

      - name: Check mgdeps-cache availability
        run: |
          if [ "${{ inputs.arch }}" == "amd64" ]; then
            echo "mgdeps-cache is temporary disabled for amd64"
            echo "CACHE_PRESENT=false" >> $GITHUB_ENV
          elif curl --silent --fail "http://mgdeps-cache:8000/wheels/" -o /dev/null; then
            echo "mgdeps-cache is reachable :D"
            echo "CACHE_PRESENT=true" >> $GITHUB_ENV
          else
            echo "mgdeps-cache is NOT reachable"
            echo "CACHE_PRESENT=false" >> $GITHUB_ENV
          fi

      - name: Create wheels directory and fetch wheels if available
        run: |
          mkdir -p wheels
          if [ "$CACHE_PRESENT" = "true" ]; then
            echo "Cache is present. Fetching wheels..."
            wget -r -np -nH --cut-dirs=1 -P wheels "http://mgdeps-cache:8000/wheels/"
          else
            echo "Cache is not present. Skipping wheel fetch."
          fi

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set build type
        run: |
          BUILD_TYPE="${{ inputs.mage_build_type }}"
          echo "MAGE_BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV

      - name: Set image tag and artifact name
        run: |
          MEMGRAPH_VERSION=${{ inputs.memgraph_version }}
          MAGE_VERSION=${{ inputs.mage_version }}
          if [[ ${{ inputs.shorten_tag }} == true ]]; then
            MEMGRAPH_VERSION=${MEMGRAPH_VERSION%%-*}
            memgraph_patch_version=${MEMGRAPH_VERSION##*.}
            MAGE_VERSION=${MAGE_VERSION%%-*}
            mage_patch_version=${MAGE_VERSION##*.}
            if [[ "$memgraph_patch_version" -eq 0 ]]; then
              MEMGRAPH_VERSION=${MEMGRAPH_VERSION%.*}
            fi
            if [[ "$mage_patch_version" -eq 0 ]]; then
              MAGE_VERSION=${MAGE_VERSION%.*}
            fi
          fi

          # if these match, then tag the image with the shortest vesion, e.g. 3.1.1
          # rather than 3.1.1-memgraph-3.1.1, hopefully this won't affect the
          # daily build versioning, which will still be massive
          if [[ "$MAGE_VERSION" == "$MEMGRAPH_VERSION" ]]; then
            IMAGE_TAG="${MAGE_VERSION}"
          else
            IMAGE_TAG="${MAGE_VERSION}-memgraph-${MEMGRAPH_VERSION}"
          fi
          IMAGE_TAG="${IMAGE_TAG//+/_}"
          IMAGE_TAG="${IMAGE_TAG//\~/_}"
          ARTIFACT_NAME="mage-${IMAGE_TAG}"
          if [[ "${{ inputs.arch }}" == 'arm64' ]]; then
            ARTIFACT_NAME="${ARTIFACT_NAME}-arm64"
          fi
          if [[ "${{ env.MAGE_BUILD_TYPE }}" == 'RelWithDebInfo' ]]; then
            ARTIFACT_NAME="${ARTIFACT_NAME}-relwithdebinfo"
            IMAGE_TAG="${IMAGE_TAG}-relwithdebinfo"
          fi
          if [[ "${{ inputs.malloc }}" == true ]]; then
            ARTIFACT_NAME="${ARTIFACT_NAME}-malloc"
            IMAGE_TAG="${IMAGE_TAG}-malloc"          
          fi
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV

      - name: Set CI branch name for PR events
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "CI_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
      

      - name: Get Current MAGE Tag
        run: |
          # Get the current tag, or branch if a tag doesn't exist
          # This is used later in image creation, so that the exact version of 
          # the MAGE git repository can be checked out within the container, 
          # when we run the script to convert to "dev" container
          if [ -z "${{ inputs.ref }}" ]; then
            echo "No specific ref provided, using current branch/tag."
            # If no ref is provided, use the current branch or tag
            tag=$(./get_tag.sh)
          else
            echo "Using provided ref: ${{ inputs.ref }}"
            tag="${{ inputs.ref }}"
          fi
          

          # If tag is empty, fallback to the branch name
          if [ -z "$tag" ]; then
            echo "No valid tag found; using branch name."
            # If CI_BRANCH is set (for PR events), use it; otherwise, use GITHUB_REF
            if [ -n "$CI_BRANCH" ]; then
              tag="$CI_BRANCH"
            else
              tag="${GITHUB_REF#refs/heads/}"
            fi
          fi

          echo "Using tag/branch: $tag"
          echo "MAGE_COMMIT=${tag}" >> $GITHUB_ENV


      - name: Set target dockerfile
        run: |
          DOCKERFILE="Dockerfile.release"
          echo "DOCKERFILE=${DOCKERFILE}" >> $GITHUB_ENV

      - name: Check if specified version tag is already pushed
        if: ${{ inputs.push_to_dockerhub == 'true' }}
        run: |
          EXISTS=$(docker manifest inspect $DOCKER_ORGANIZATION_NAME/$DOCKER_REPOSITORY_NAME:${{ env.IMAGE_TAG }} > /dev/null; echo $?)
          echo $EXISTS
          if [[ ${EXISTS} -eq 0 ]]; then
              echo The specified version has been already released to DockerHub!
              if [[ ${{ inputs.force_release }} = true ]]; then
                echo Forcing the release
              else
                echo Stopping the release
                exit 1
              fi
          else
              echo All good the specified version has not been release to DockerHub
          fi

      - name: Set up and check memgraph download link
        run: |
          if [[ -z "${{ inputs.memgraph_download_link }}" ]]; then
            echo "Using official download link"
            mg_url="https://download.memgraph.com/memgraph/v${{ inputs.memgraph_version }}/$OS/memgraph_${{ inputs.memgraph_version }}-1_${{ inputs.arch }}.deb"
          else
            echo "Using custom download link"
            mg_url=${{ inputs.memgraph_download_link }}
          fi

          ./scripts/verify_download_url.sh "$mg_url"
          echo "MEMGRAPH_DOWNLOAD_LINK=${mg_url}" >> $GITHUB_ENV


      - name: Download memgraph binary
        run: curl -L --retry 5 --retry-delay 20 --retry-max-time 120 ${{ env.MEMGRAPH_DOWNLOAD_LINK }} > memgraph-${{ inputs.arch }}.deb

      - name: Probe fastest mirror
        run: |
          FASTEST=$(bash scripts/test-mirrors.sh)
          echo "CUSTOM_MIRROR=${FASTEST}" >> $GITHUB_ENV

      # Add ability to add additional tag after the image has been built
      # --tag ${DOCKER_REPOSITORY_NAME}:${{ inputs.additional_tag }} \
      - name: Build docker image
        run: |
          if [[ "${{ inputs.arch }}" == "arm64" ]]; then
            MGBUILD_IMAGE=memgraph/mgbuild:v6_ubuntu-24.04-arm
          else
            MGBUILD_IMAGE=memgraph/mgbuild:v6_ubuntu-24.04
          fi

          echo "Using base image: $MGBUILD_IMAGE"
          echo "Image Tag: ${{ env.IMAGE_TAG }}"

          # target is "prod" for Release and "debug" for RelWithDebInfo
          if [ "${{ env.MAGE_BUILD_TYPE }}" = "RelWithDebInfo" ]; then
            DOCKER_TARGET=debug
          else
            DOCKER_TARGET=prod
          fi
          echo "Using target: $DOCKER_TARGET"

          docker buildx build \
          --target $DOCKER_TARGET \
          --platform linux/${{ inputs.arch }} \
          --tag ${DOCKER_REPOSITORY_NAME}:${{ env.IMAGE_TAG }} \
          --file ${{ env.DOCKERFILE }} \
          --build-arg BUILD_TYPE=${{ env.MAGE_BUILD_TYPE }} \
          --build-arg MGBUILD_IMAGE=$MGBUILD_IMAGE \
          --build-arg MAGE_COMMIT="${{ env.MAGE_COMMIT }}" \
          --build-arg CACHE_PRESENT=${{ env.CACHE_PRESENT }} \
          --build-arg CUSTOM_MIRROR=${{ env.CUSTOM_MIRROR }} \
          --load .

          # print the image size in both SI and IEC units
          ./print_image_size.sh ${DOCKER_REPOSITORY_NAME} ${{ env.IMAGE_TAG }}


      - name: Save docker image
        run: |
          mkdir output
          docker save ${DOCKER_REPOSITORY_NAME}:${{ env.IMAGE_TAG }} | gzip > output/${{ env.ARTIFACT_NAME }}.tar.gz
          du -h output/${{ env.ARTIFACT_NAME }}.tar.gz

      - name: Push to GitHub
        if: ${{ inputs.push_to_github == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.ARTIFACT_NAME }}"
          path: "output/${{ env.ARTIFACT_NAME }}.tar.gz"

      - name: Push to DockerHub
        if: ${{ inputs.push_to_dockerhub == 'true' }}
        run: docker push ${DOCKER_REPOSITORY_NAME}:${{ env.IMAGE_TAG }}

      - name: Push to S3 with retry
        if: ${{ inputs.push_to_s3 == 'true' }}
        env:
          AWS_S3_BUCKET: ${{ inputs.s3_dest_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "eu-west-1"
          SOURCE_DIR: "output"
          DEST_DIR: "${{ inputs.s3_dest_dir }}/"
        run: |
          max_attempts=3
          attempt_num=1
          until [ $attempt_num -gt $max_attempts ]
          do
            echo "Attempt $attempt_num..."
            # Replace the next line with your actual s3 sync command or action logic
            aws s3 sync $SOURCE_DIR s3://$AWS_S3_BUCKET/$DEST_DIR && break || {
              echo "Attempt $attempt_num failed. Retrying in 5 seconds..."
              sleep 5
              attempt_num=$((attempt_num+1))
            }
          done

      - name: Construct Output URL
        id: output-url
        if: ${{ inputs.push_to_s3 == 'true' && (inputs.run_smoke_tests || inputs.print_output_url) }}
        run: |
          filename="${{ env.ARTIFACT_NAME }}.tar.gz"
          output_url="https://s3.eu-west-1.amazonaws.com/${{ inputs.s3_dest_bucket }}/${{ inputs.s3_dest_dir }}/$filename"
          echo "s3_url=$output_url" >> $GITHUB_OUTPUT            

      - name: Print Output URL
        if: ${{ inputs.print_output_url && inputs.push_to_s3 }}
        run: |
          echo "::notice::Output URL: ${{ steps.output-url.outputs.s3_url }}"


  SetupSmokeTest:
    runs-on: [self-hosted]
    needs: [BuildAndPush]
    if: ${{ inputs.run_smoke_tests && inputs.push_to_s3 }}
    outputs:
      last_version: ${{ steps.get-latest-tag.outputs.clean_tag }}
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ inputs.ref != '' && inputs.ref || github.ref }}
      
      - name: Get Latest MAGE Tag
        id: get-latest-tag
        run: |
          tag="$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)"
          clean_tag="${tag#v}"
          echo "Found latest tag: ${clean_tag}"
          echo "clean_tag=$clean_tag" >> $GITHUB_OUTPUT

  RunSmokeTests:
    needs: [BuildAndPush, SetupSmokeTest]
    uses: ./.github/workflows/reusable_smoke_tests.yml
    with:
      arch: "${{ inputs.arch }}"
      next_version: "${{ needs.BuildAndPush.outputs.s3_package_url }}"
      last_version: "${{ needs.SetupSmokeTest.outputs.last_version }}"
      malloc: ${{ inputs.malloc }}
    secrets: inherit
