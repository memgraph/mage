name: Reusable Smoke Test

on:
  workflow_call:
    inputs:
      arch:
        type: string
        description: "Architecture to build the image for (amd64/arm64)"
        required: true
      next_version:
        type: string
        required: false
        description: "Version (x.y.z), daily build date (YYYYMMDD), or URL to Docker image: Default - latest daily build"
      last_version:
        type: string
        required: false
        description: "Version (x.y.z), daily build date (YYYYMMDD), or URL to Docker image: Default - latest release"
      malloc:
        type: boolean
        default: false
        description: "Used if next_type or last_type is of 'date'"

env:
  MEMGRAPH_ENTERPRISE_LICENSE: ${{ secrets.MEMGRAPH_ENTERPRISE_LICENSE }}
  MEMGRAPH_ORGANIZATION_NAME: ${{ secrets.MEMGRAPH_ORGANIZATION_NAME }}

jobs:
  smoke-test-image:
    runs-on: ${{ (inputs.arch == 'arm64') && fromJSON('["self-hosted", "ARM64"]') || fromJSON('["self-hosted", "X64"]') }}
    services:
      docker:
        image: docker:24-dind
        privileged: true
    container:
      image: ubuntu:24.04
      options: --user root
    defaults:
      run:
        shell: bash
    env:
      DOCKER_HOST: tcp://docker:2375
    
    steps:
      - name: Wait for Docker
        run: |
          until docker version >/dev/null 2>&1; do sleep 1; done
          
      - name: Install git
        run: |
          apt-get update
          apt-get install -y git

      - name: Install Docker
        run: |
          apt-get install -y ca-certificates curl
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
            tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Input Types
        run: |
          read next_type next_image < <(python3 smoke-release-testing/workflow_image_setup.py "${{ inputs.next_version }}" "${{ inputs.arch }}" "${{ inputs.malloc }}")
          echo "NEXT_IMAGE=${next_image}" >> $GITHUB_ENV
          echo "NEXT_TYPE=${next_type}" >> $GITHUB_ENV
          read last_type last_image < <(python3 smoke-release-testing/workflow_image_setup.py "${{ inputs.last_version }}" "${{ inputs.arch }}" "${{ inputs.malloc }}")
          echo "LAST_IMAGE=${last_image}" >> $GITHUB_ENV
          echo "LAST_TYPE=${last_type}" >> $GITHUB_ENV

      - name: Load Next Image (Docker)
        if: ${{ env.NEXT_TYPE == 'docker' }}
        run: |
          docker pull "${{ env.NEXT_IMAGE }}"
          echo "MEMGRAPH_NEXT_DOCKERHUB_IMAGE=${{ env.NEXT_IMAGE }}" >> $GITHUB_ENV

      - name: Load Next Image (URL)
        if: ${{ env.NEXT_TYPE == 'url' }}
        run: |
          curl -L ${{ env.NEXT_IMAGE }} > next.tar.gz
          load_output=$(docker load -i next.tar.gz)
          
          # grab each repo:tag, drop the ":latest" one, pick the first real tag
          repo_tag=$(echo "$load_output" \
            | awk -F': ' '/Loaded image:/ {print $2}' \
            | grep -v ':latest$' \
            | head -n1)

          echo "MEMGRAPH_NEXT_DOCKERHUB_IMAGE=${repo_tag}" >> $GITHUB_ENV

      - name: Load Last Image (Docker)
        if: ${{ env.LAST_TYPE == 'docker' }}
        run: |
          docker pull "${{ env.LAST_IMAGE }}"
          echo "MEMGRAPH_LAST_DOCKERHUB_IMAGE=${{ env.LAST_IMAGE }}" >> $GITHUB_ENV

      - name: Load Last Image (URL)
        if: ${{ env.LAST_TYPE == 'url' }}
        run: |
          curl -L ${{ env.LAST_IMAGE }} > last.tar.gz
          load_output=$(docker load -i last.tar.gz)
          
          # grab each repo:tag, drop the ":latest" one, pick the first real tag
          repo_tag=$(echo "$load_output" \
            | awk -F': ' '/Loaded image:/ {print $2}' \
            | grep -v ':latest$' \
            | head -n1)

          echo "MEMGRAPH_LAST_DOCKERHUB_IMAGE=${repo_tag}" >> $GITHUB_ENV


      - name: Init Tests
        run: |
          cd smoke-release-testing
          ./init_workflow.bash
      
      - name: Run Tests
        run: |
          cd smoke-release-testing
          ./test.bash

      
      # remove these if init script works!
      # - name: Install jq 
      #   run: |
      #     apt-get update
      #     apt-get install -y jq          

      # - name: Setup Go
      #   uses: actions/setup-go@v4
      #   with:
      #     go-version: 'stable'

      # - name: Install kind v0.24.0
      #   run: |
      #     go install sigs.k8s.io/kind@v0.24.0
      #     echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      # - name: Verify kind
      #   run: kind --version

      # - name: Install kubectl
      #   run: |
      #     KUBE_VER=$(curl -L -s https://dl.k8s.io/release/stable.txt)
      #     mkdir -p $HOME/bin
      #     curl -Lo kubectl \
      #       "https://dl.k8s.io/release/${KUBE_VER}/bin/linux/amd64/kubectl"
      #     curl -Lo kubectl.sha256 \
      #       "https://dl.k8s.io/release/${KUBE_VER}/bin/linux/amd64/kubectl.sha256"
      #     echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
      #     chmod +x kubectl
      #     mv kubectl $HOME/bin/
      #     echo "$HOME/bin" >> $GITHUB_PATH

      # - name: Verify kubectl
      #   run: kubectl version --client

      # - name: Create Kind cluster
      #   run: |
      #     if ! kubectl cluster-info --context kind-kind &>/dev/null; then
      #       kind create cluster --name kind-kind
      #     fi
      #     kubectl get all -A

      # - name: Install Helm
      #   run: |
      #     mkdir -p $HOME/bin
      #     export HELM_INSTALL_DIR=$HOME/bin
      #     curl -fsSL -o get_helm.sh \
      #       https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
      #     chmod +x get_helm.sh
      #     ./get_helm.sh
      #     echo "$HOME/bin" >> $GITHUB_PATH

      # - name: Configure Helm repo
      #   run: |
      #     helm repo add memgraph https://memgraph.github.io/helm-charts
      #     helm repo update
      #     helm repo list

      # - name: Build mgconsole
      #   run: |
      #     if [ ! -d mgconsole.build ]; then
      #       git clone git@github.com:memgraph/mgconsole.git mgconsole.build
      #     fi
      #     cd mgconsole.build
      #     git checkout master
      #     mkdir -p build && cd build
      #     cmake -DCMAKE_RELEASE_TYPE=Release ..
      #     make -j$(nproc)
      #     if [ -x src/mgconsole ]; then
      #       echo "mgconsole built successfully"
      #     else
      #       echo "mgconsole build failed" && exit 1
      #     fi

      # - name: Build mgconsole
      #   run: |
      #     if [ ! -d mgconsole.build ]; then
      #       git clone git@github.com:memgraph/mgconsole.git mgconsole.build
      #     fi
      #     cd mgconsole.build
      #     git checkout master
      #     mkdir -p build && cd build
      #     cmake -DCMAKE_RELEASE_TYPE=Release ..
      #     make -j$(nproc)
      #     if [ -x src/mgconsole ]; then
      #       echo "mgconsole built successfully"
      #     else
      #       echo "mgconsole build failed" && exit 1
      #     fi