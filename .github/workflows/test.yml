name: Build and Test

env:
  PY_VERSION: "3.9"
  CORE_COUNT: "8"
  MAGE_CONTAINER: "mage"

on: [pull_request, workflow_dispatch]

jobs:
  build:
    runs-on:  ubuntu-latest
    env:
      MEMGRAPH_VERSION: 2.5.2
    strategy:
      matrix:
        architecture: ["amd64", "arm64"]
        target: ["prod", "dev"]
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Download memgraph binaries
        run: |
          curl -L https://download.memgraph.com/memgraph/v${MEMGRAPH_VERSION}/debian-11/memgraph_${MEMGRAPH_VERSION}-1_amd64.deb > memgraph-amd64.deb
          curl -L https://download.memgraph.com/memgraph/v${MEMGRAPH_VERSION}/debian-11-aarch64/memgraph_${MEMGRAPH_VERSION}-1_arm64.deb > memgraph-arm64.deb

      - name: Build Memgraph MAGE:${{ matrix.target }}
        run: |
          DOCKER_BUILDKIT=1 docker buildx build \
          --tag memgraph-mage:${{ matrix.target }} \
          --target ${{ matrix.target }} \
          --platform linux/${{ matrix.architecture }} \
          --file Dockerfile.release \
          --load .

      - name: Run Memgraph MAGE:${{ matrix.target }} image
        run: |
          docker run -d -p 7687:7687 --name ${{ env.MAGE_CONTAINER }} memgraph-mage:${{ matrix.target }} --telemetry-enabled=False

      - name: Set up C++
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PY_VERSION }}
      
      - name: Install Python test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./python/tests/requirements.txt

      - name: Build C++ modules
        run: |
          mkdir -p cpp/build
          cd cpp/build
          cmake ..
          make -j${{ env.CORE_COUNT }}

      - name: C++ Modules unit tests
        if: matrix.target == 'dev'
        run: |
          cd cpp/build
          ctest -j${{ env.CORE_COUNT }}

      - name: Python modules unit tests
        if: matrix.target == 'dev'
        env:
          PYTHONPATH: "$PWD/python"
        run: |
          docker exec -i -u root ${{ env.MAGE_CONTAINER }} bash -c "cd /mage/python/ && python3 -m pytest ."

      - name: Rust library tests
        if: matrix.target == 'dev'
        run: |
          cd rust/rsmgp-sys
          cargo fmt -- --check
          cargo test

      - name: Run End-to-end tests
        if: matrix.architecture != 'arm64'
        env:
          PYTHONPATH: "$PWD/e2e"
        run: |
          cd e2e
          python -m pytest . -k 'not cugraph'
